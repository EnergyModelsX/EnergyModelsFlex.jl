stages:
  - test
  - deploy


before_script:
  # Install git.
  - apt-get update -qq && apt-get install -y git

  # Install ssh-agent and add the private key.
  - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )
  - eval $(ssh-agent -s)
  - echo "$PRIVATE_DEPLOY_KEY_EMB" | tr -d '\r' | ssh-add -

  # Set up the .ssh directory.
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  # Set the known_hosts to a variable containing the public key of gitlab.sintef.no
  - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

  # Test the ssh connection.
  - ssh -T git@gitlab.sintef.no

  # Add the Clean Export internal registry and the public General registry.
  - julia -e 'using Pkg; Pkg.Registry.add(RegistrySpec(url = "git@gitlab.sintef.no:clean_export/registrycleanexport.git"))'
  - julia -e 'using Pkg; Pkg.Registry.add(RegistrySpec(url = "https://github.com/JuliaRegistries/General"))'


# Below is the template to run the tests in Julia
.test_template: &test_definition
  stage: test
  script:
    - echo "Run tests"
    - julia -e 'using Pkg; Pkg.Registry.status()'
    - julia --project=. -e 'using Pkg; Pkg.test(; coverage = true);
        Pkg.add("Coverage");
        Pkg.instantiate();
        using Coverage;
        processed = process_folder();
        covered_lines, total_lines = get_summary(processed);
        percentage = covered_lines / total_lines * 100;
        return println("Code coverage $(percentage)%")'
  coverage: "/\\(\\d+.\\d+\\%\\) covered/"
  rules:
    - when: always


test:1.10:
  image: julia:1.10
  <<: *test_definition

# Test that the pages compile, without making it public. Only runs on merge requests.
test:pages:
  image: julia:1.10
  stage: test
  script:
    - julia --project=docs -e 'import Pkg; Pkg.develop(;path=".");Pkg.instantiate()' # Initialize environment
    - julia --project=docs docs/make.jl                       # Build documentation
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

## Deploy the documentation.
pages:
  stage: deploy
  image: julia:latest
  script:
    - julia --project=docs -e 'import Pkg; Pkg.develop(;path=".");Pkg.instantiate()' # Initialize environment
    - julia --project=docs docs/make.jl                       # Build documentation
    - mv docs/build public  # move to the directory picked up by Gitlab pages
  artifacts:
    paths:
      - public
  rules:
    # Only execute this on the default branch and on merge requests.
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Register version
register:
  image: julia:1.10
  stage: deploy
  script:
    - julia -e 'using Pkg; Pkg.Registry.status()'
    # Set name and email for the bot pushing to the registry.
    - git config --global user.email "<@>"
    - git config --global user.name "Registrator"
    - julia --project="test" -e 'using Pkg; Pkg.instantiate();
        Pkg.add("LocalRegistry")'  # install dependencies.
    # Register the package. LocalRegistry will not register a new version if it is already registered.
    - julia --project="test" -e 'using LocalRegistry;
        repo = "git@gitlab.sintef.no:" * ENV["CI_PROJECT_PATH"] * ".git";
        register(repo=repo, create_gitlab_mr=true, ignore_reregistration = true)'  # register the package
  rules:
    # Only execute this on the default branch.
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
